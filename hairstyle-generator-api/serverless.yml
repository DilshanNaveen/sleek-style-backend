org: dilshaniit
app: sleek-style
service: hairstyle-generator
frameworkVersion: '3'

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-iam-roles-per-function
  - serverless-webpack
  # - serverless-domain-manager

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'npm'
    includeModules: true
  # customDomain:
  #   domainName: ${param:DOMAIN_NAME}
  #   basePath: generator-api
  #   createRoute53Record: false

provider:
  name: aws
  runtime: nodejs18.x
  environment:
    S3_BUCKET_HAIRSTYLE_SUGGESTIONS: ${param:S3_BUCKET_HAIRSTYLE_SUGGESTIONS}
    S3_BUCKET_USER_DATA: ${param:S3_BUCKET_USER_DATA}
    DYNAMODB_TABLE_USER_DATA: ${param:DYNAMODB_TABLE_USER_DATA}
    REPLICATE_API_URL: ${param:REPLICATE_API_URL}
    REPLICATE_API_TOKEN: ${param:REPLICATE_API_TOKEN}
    WEBHOOK_URL: ${param:WEBHOOK_URL}
    MODEL_VERSION: ${param:MODEL_VERSION}
  logRetentionInDays: 1
  apiGateway:
    shouldStartNameWithService: true

functions:  
  generate-hairstyle:
    handler: generateHairstyle.get
    timeout: 30
    events:
      - http:
          path: /generate-hairstyle
          method: get
    iamRoleStatementsName: ${self:app}-${self:service}-generate-hairstyle
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "s3:PutObject"
          - "s3:GetObject"
        Resource: 
          Fn::Join: ["", [ "arn:aws:s3:::", "${param:S3_BUCKET_USER_DATA}/*" ]]
      - Effect: "Allow"
        Action:
          - "s3:*"
        Resource: 
          Fn::Join: ["", [ "arn:aws:s3:::", "${param:S3_BUCKET_HAIRSTYLE_SUGGESTIONS}" ]]
      - Effect: "Allow"
        Action:
          - "s3:*"
        Resource: 
          Fn::Join: ["", [ "arn:aws:s3:::", "${param:S3_BUCKET_HAIRSTYLE_SUGGESTIONS}/*" ]]
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: 
          Fn::Join: [ "", [ "arn:aws:dynamodb:", { Ref: "AWS::Region" }, ':', { Ref: "AWS::AccountId" }, ":table/${param:DYNAMODB_TABLE_USER_DATA}" ] ]

  handle-webhook:
    handler: webhookHandler.post
    timeout: 30
    events:
      - http:
          path: /handle-webhook
          method: post
    iamRoleStatementsName: ${self:app}-${self:service}-handle-webhook
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "s3:PutObject"
          - "s3:GetObject"
        Resource: 
          Fn::Join: ["", [ "arn:aws:s3:::", "${param:S3_BUCKET_USER_DATA}/*" ]]
      - Effect: "Allow"
        Action:
          - "s3:*"
        Resource: 
          Fn::Join: ["", [ "arn:aws:s3:::", "${param:S3_BUCKET_HAIRSTYLE_SUGGESTIONS}" ]]
      - Effect: "Allow"
        Action:
          - "s3:*"
        Resource: 
          Fn::Join: ["", [ "arn:aws:s3:::", "${param:S3_BUCKET_HAIRSTYLE_SUGGESTIONS}/*" ]]
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: 
          Fn::Join: [ "", [ "arn:aws:dynamodb:", { Ref: "AWS::Region" }, ':', { Ref: "AWS::AccountId" }, ":table/${param:DYNAMODB_TABLE_USER_DATA}" ] ]

  cancel-generator:
    handler: cancelGenerator.get
    timeout: 30
    events:
      - http:
          path: /cancel-generator
          method: get
    iamRoleStatementsName: ${self:app}-${self:service}-cancel-generator
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "s3:PutObject"
          - "s3:GetObject"
        Resource: 
          Fn::Join: ["", [ "arn:aws:s3:::", "${param:S3_BUCKET_USER_DATA}/*" ]]
      - Effect: "Allow"
        Action:
          - "s3:*"
        Resource: 
          Fn::Join: ["", [ "arn:aws:s3:::", "${param:S3_BUCKET_HAIRSTYLE_SUGGESTIONS}" ]]
      - Effect: "Allow"
        Action:
          - "s3:*"
        Resource: 
          Fn::Join: ["", [ "arn:aws:s3:::", "${param:S3_BUCKET_HAIRSTYLE_SUGGESTIONS}/*" ]]
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: 
          Fn::Join: [ "", [ "arn:aws:dynamodb:", { Ref: "AWS::Region" }, ':', { Ref: "AWS::AccountId" }, ":table/${param:DYNAMODB_TABLE_USER_DATA}" ] ]

  get-generator-status:
    handler: getGeneratorStatus.get
    timeout: 30
    events:
      - http:
          path: /generator-status
          method: get
          
    iamRoleStatementsName: ${self:app}-${self:service}-get-generator-status
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
        Resource: 
          Fn::Join: [ "", [ "arn:aws:dynamodb:", { Ref: "AWS::Region" }, ':', { Ref: "AWS::AccountId" }, ":table/${param:DYNAMODB_TABLE_USER_DATA}" ] ]